// SPDX-License-Identifier: MIT
// An example of a consumer contract that relies on a subscription for funding.
pragma solidity 0.8.4;

// we need to request a random number from this contract
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
// we also need some functionalities from this contract
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";

contract VRF is VRFConsumerBaseV2 {
    VRFCoordinatorV2Interface immutable i_vrfCoordinator;
    bytes32 immutable i_gasLane; // =keyHash --> max gas price willing to pay for the request

    uint64 constant SUBSCRIPTION_ID = 4894;
    uint32 constant CALLBACK_GAS_LIMIT = 1000000; // max gas amoung willing to pay to receive the number
    uint16 constant REQUEST_CONFIRMATIONS = 3; // bloc confirmations to consider the transaction completed
    uint32 constant NUM_WORDS = 5; // number of values that we want to get
    uint256 constant MAX_VALUE = 2; // maximum random value we want to get

    //variables no definides en aquest contracte:
    uint256[] s_randomWords;
    uint256 public s_requestId;

    constructor(address _vrfCoordinatorV2, bytes32 _gasLane)
        VRFConsumerBaseV2(_vrfCoordinatorV2)
    {
        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);
        i_gasLane = _gasLane;
    }

    /**
     *  @dev This function will make a request to the oracle to generate the random numbers:
     */
    function requestAlgoPlay() external {
        s_requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane,
            SUBSCRIPTION_ID,
            REQUEST_CONFIRMATIONS,
            CALLBACK_GAS_LIMIT,
            NUM_WORDS
        );
    }

    /**
     *  @dev This function is called by the oracle and it stores the random values.
     *  It will override the function with the same name from "VRFConsumerBaseV2.sol"
     *  @param randomWords is an array containing the random values generated by the
     *  oracle. It is inputed by the VRFCoordinator, which calls the function with this
     *  name in "VRFConsumerBaseV2.sol", function that we override
     */
    function fulfillRandomWords(uint256, uint256[] memory randomWords)
        internal
        override
    {
        for (uint256 i = 0; i < MAX_VALUE; i++) {
            s_randomWords[i] = randomWords[i] % MAX_VALUE; // we will get a number between 0-2
        }
    }

    function _getRandomNumber(uint256 _playId) external view returns (uint256) {
        return s_randomWords[_playId];
    }

    function _haveNumbers() external view returns (bool) {
        if (s_randomWords.length == 3) {
            return true;
        } else {
            return false;
        }
    }
}
