{
  "language": "Solidity",
  "sources": {
    "contracts/eventFactory.sol": {
      "content": "pragma solidity 0.8.4;\r\n\r\n// This contract\r\n// 1) is a factory of eventGame contracts\r\n// 2) records every event created\r\n\r\nimport \"./eventGame.sol\";\r\n\r\n/** @title A contract for crowd funding\r\n *  @author David Camps Novi\r\n *  @dev This is a Factory contract to deploy eventGame contracts and log all its info\r\n */\r\ncontract EventFactory {\r\n    address private immutable i_logAddress;\r\n    address private immutable i_vrfAddress;\r\n    uint256 private s_nextId;\r\n\r\n    constructor(address _logAddress, address _vrfAddress) {\r\n        i_logAddress = _logAddress;\r\n        i_vrfAddress = _vrfAddress;\r\n        s_nextId = 1;\r\n    }\r\n\r\n    /**\r\n     *  @dev This function creates gameEvent contracts and logs all its info into eventLog\r\n     *  @param _eventName is the name chosen by the owner of the event\r\n     *  @param _numberOfTickets is the number of tickets available for the event\r\n     *  @param _ticketPrice is the price at which the tickets will be sold\r\n     *  @return It returns the address of the created gameEvent\r\n     */\r\n    function createEventGame(\r\n        string memory _eventName,\r\n        uint256 _numberOfTickets,\r\n        uint256 _ticketPrice\r\n    ) external returns (address) {\r\n        EventLog log = EventLog(i_logAddress);\r\n        EventGame game = new EventGame(\r\n            i_logAddress,\r\n            i_vrfAddress,\r\n            msg.sender,\r\n            s_nextId\r\n        );\r\n        log._logEvent(\r\n            s_nextId,\r\n            address(game),\r\n            msg.sender,\r\n            _eventName,\r\n            _numberOfTickets,\r\n            _ticketPrice\r\n        );\r\n        log._addCreatedEvent(msg.sender, s_nextId);\r\n        s_nextId += 1;\r\n        return address(game);\r\n    }\r\n\r\n    function getVrfAddress() external view returns (address) {\r\n        return (i_vrfAddress);\r\n    }\r\n\r\n    function getLogAddress() external view returns (address) {\r\n        return (i_logAddress);\r\n    }\r\n\r\n    function getNextId() external view returns (uint256) {\r\n        return (s_nextId);\r\n    }\r\n}\r\n"
    },
    "contracts/eventGame.sol": {
      "content": "pragma solidity 0.8.4;\r\n\r\nimport \"contracts/gameInterface.sol\";\r\n\r\ncontract EventGame {\r\n    // constant variables since the creation of the event\r\n    address immutable s_logAddress;\r\n    address immutable s_vrfAddress;\r\n    address immutable s_owner;\r\n    uint256 public immutable s_eventId;\r\n\r\n    enum GameStatus {\r\n        Registering,\r\n        Started,\r\n        Ended\r\n    }\r\n\r\n    GameStatus public status;\r\n\r\n    // constructor that defines all variables described above\r\n    constructor(\r\n        address _logAddress,\r\n        address _vrfAddress,\r\n        address _owner,\r\n        uint256 _eventId\r\n    ) {\r\n        // definition of constant variables\r\n        s_logAddress = _logAddress;\r\n        s_vrfAddress = _vrfAddress;\r\n        s_owner = _owner;\r\n        s_eventId = _eventId;\r\n    }\r\n\r\n    modifier isRegistering() {\r\n        require(status == GameStatus.Registering);\r\n        _;\r\n    }\r\n\r\n    modifier isStarted() {\r\n        require(status == GameStatus.Started);\r\n        _;\r\n    }\r\n\r\n    modifier isEnded() {\r\n        require(status == GameStatus.Ended);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == s_owner);\r\n        _;\r\n    }\r\n\r\n    // registration and user-related variables\r\n    address[] public s_registeredAddresses;\r\n    mapping(address => bool) public s_isRegistered;\r\n    mapping(address => UserScore) public scoreboard;\r\n    mapping(uint256 => address[]) s_groups;\r\n    struct UserScore {\r\n        uint256 points;\r\n        uint256 numberOfPlays;\r\n        uint256 timeElapsed;\r\n    }\r\n\r\n    // game-related variables\r\n    uint256 timeLimit; // time at which users can't make more plays\r\n    enum PossiblePlays {\r\n        Rock,\r\n        Paper,\r\n        Scissors\r\n    }\r\n\r\n    // emission of events for each play result\r\n    event result(\r\n        address indexed gameAddress,\r\n        address indexed player,\r\n        string result,\r\n        uint256 points\r\n    );\r\n\r\n    //\r\n    // UPDATE EVENTS\r\n    //\r\n\r\n    function getEventId() external view returns (uint256) {\r\n        return s_eventId;\r\n    }\r\n\r\n    function updateName(string memory _newName) public onlyOwner isRegistering {\r\n        EventLog log = EventLog(s_logAddress);\r\n        log._updateName(s_eventId, _newName);\r\n    }\r\n\r\n    function updateTickets(uint256 _newTickets) public onlyOwner isRegistering {\r\n        EventLog log = EventLog(s_logAddress);\r\n        log._updateTickets(s_eventId, _newTickets);\r\n    }\r\n\r\n    function updatePrice(uint256 _newPrice) public onlyOwner isRegistering {\r\n        EventLog log = EventLog(s_logAddress);\r\n        log._updatePrice(s_eventId, _newPrice);\r\n    }\r\n\r\n    //\r\n    // REGISTRATION\r\n    //\r\n\r\n    // Registration of buyers => checks multi-registration\r\n    function register() public isRegistering {\r\n        require(\r\n            s_isRegistered[msg.sender] == false,\r\n            \"You have already registered!\"\r\n        ); // ensure the person have not registered\r\n        UserScore memory initialUserScore = UserScore(0, 0, block.timestamp);\r\n        scoreboard[msg.sender] = initialUserScore;\r\n        s_registeredAddresses.push(msg.sender);\r\n        s_isRegistered[msg.sender] = true;\r\n        EventLog log = EventLog(s_logAddress);\r\n        log._addRegisteredEvent(msg.sender, s_eventId);\r\n    }\r\n\r\n    //\r\n    // START GAME ---> manually activated by organizer\r\n    //\r\n\r\n    // Random numbers generation is called in this function (VRF node calls)\r\n    function startGame() public isRegistering {\r\n        status = GameStatus.Started;\r\n        //VRF vrf = VRF(s_vrfAddress);\r\n        //vrf.requestRandomWords();\r\n        EventLog log = EventLog(s_logAddress);\r\n        uint256 numberOfTickets = log.getNumberOfTickets(s_eventId);\r\n        uint256 numberOfPlayers = s_registeredAddresses.length;\r\n        if (numberOfTickets >= numberOfPlayers) {\r\n            for (uint256 i = 0; i < numberOfPlayers; i++) {\r\n                log._addWinner(s_eventId, s_registeredAddresses[i]);\r\n            }\r\n        }\r\n        log._gameStart(s_eventId);\r\n        timeLimit = block.timestamp + 1000000000000000;\r\n        //_createGroups();\r\n    }\r\n\r\n    // Groups are created when the game is started\r\n    function _createGroups() private {\r\n        EventLog log = EventLog(s_logAddress);\r\n        uint256 numberOfTickets = log.getNumberOfTickets(s_eventId);\r\n        uint256 numberOfPlayers = s_registeredAddresses.length;\r\n        uint256 lastGroupPlayers = numberOfPlayers % numberOfTickets;\r\n        uint256 groupLen = (numberOfPlayers - lastGroupPlayers) /\r\n            numberOfTickets;\r\n        _createLastGroup(numberOfTickets, numberOfPlayers, groupLen);\r\n        _createSubGroups(numberOfTickets, groupLen);\r\n    }\r\n\r\n    function _createLastGroup(\r\n        uint256 _numberOfTickets,\r\n        uint256 _numberOfPlayers,\r\n        uint256 _groupLen\r\n    ) private {\r\n        address[] memory lastGroup;\r\n        uint256 startIndex = (_numberOfTickets - 1) * _groupLen;\r\n        uint256 j = 0;\r\n        for (uint256 i = startIndex; i < _numberOfPlayers; i++) {\r\n            lastGroup[j] = s_registeredAddresses[i];\r\n            j += 1;\r\n        }\r\n        s_groups[_numberOfTickets - 1] = lastGroup;\r\n    }\r\n\r\n    function _createSubGroups(uint256 _numberOfTickets, uint256 _groupLen)\r\n        private\r\n    {\r\n        uint256 groupId;\r\n        for (groupId = 0; groupId < _numberOfTickets - 1; groupId++) {\r\n            address[] memory subGroup;\r\n            uint256 shift = groupId * _groupLen;\r\n            for (uint256 i = 0; i < _groupLen; i++) {\r\n                subGroup[i] = s_registeredAddresses[i + shift];\r\n            }\r\n            s_groups[groupId] = subGroup;\r\n        }\r\n    }\r\n\r\n    //\r\n    // GAME MECHANICS --> some time has to pass so that random numbers are generated!\r\n    //\r\n\r\n    function userPlay(uint256 _play) public {\r\n        //isStarted {\r\n        //VRF vrf = VRF(s_vrfAddress);\r\n        //require(\r\n        //    vrf._haveNumbers(),\r\n        //    \"Calculating algorithmic play, please wait...\"\r\n        //);\r\n        uint256 playId = scoreboard[msg.sender].numberOfPlays;\r\n        require(s_isRegistered[msg.sender] == true, \"You are not registered!\");\r\n        require(playId <= 5, \"You have already made all your plays!\");\r\n        //require(block.timestamp < timeLimit, \"The game is alredy finished\");\r\n        PossiblePlays algoPlay = _getAlgoPlay(playId);\r\n        if (PossiblePlays(_play) == algoPlay) {\r\n            emit result(address(this), msg.sender, \"draw\", 1);\r\n            scoreboard[msg.sender].points += 1;\r\n        } else if (\r\n            PossiblePlays(_play) == PossiblePlays(0) &&\r\n            algoPlay == PossiblePlays(1)\r\n        ) {\r\n            emit result(address(this), msg.sender, \"loss\", 0);\r\n        } else if (\r\n            PossiblePlays(_play) == PossiblePlays(0) &&\r\n            algoPlay == PossiblePlays(2)\r\n        ) {\r\n            emit result(address(this), msg.sender, \"win\", 3);\r\n            scoreboard[msg.sender].points += 3;\r\n        } else if (\r\n            PossiblePlays(_play) == PossiblePlays(1) &&\r\n            algoPlay == PossiblePlays(0)\r\n        ) {\r\n            emit result(address(this), msg.sender, \"win\", 3);\r\n            scoreboard[msg.sender].points += 3;\r\n        } else if (\r\n            PossiblePlays(_play) == PossiblePlays(1) &&\r\n            algoPlay == PossiblePlays(2)\r\n        ) {\r\n            emit result(address(this), msg.sender, \"loss\", 0);\r\n        } else if (\r\n            PossiblePlays(_play) == PossiblePlays(2) &&\r\n            algoPlay == PossiblePlays(0)\r\n        ) {\r\n            emit result(address(this), msg.sender, \"loss\", 0);\r\n        } else {\r\n            emit result(address(this), msg.sender, \"win\", 3);\r\n            scoreboard[msg.sender].points += 3;\r\n        }\r\n        scoreboard[msg.sender].numberOfPlays += 1;\r\n        scoreboard[msg.sender].timeElapsed += block.timestamp;\r\n    }\r\n\r\n    function _getAlgoPlay(\r\n        uint256 _playId //must be changed back to private\r\n    ) public view returns (PossiblePlays) {\r\n        //VRF vrf = VRF(s_vrfAddress);\r\n        //uint256 randomNum = vrf._getRandomNumber(_playId);\r\n        //PossiblePlays algoPlay = PossiblePlays(randomNum);\r\n\r\n        PossiblePlays algoPlay = PossiblePlays(1);\r\n        return algoPlay;\r\n    }\r\n\r\n    //\r\n    // FINISH THE GAME & SET THE WINNERS\r\n    //\r\n\r\n    function endGame() public isStarted {\r\n        status = GameStatus.Ended;\r\n        _setWinners(); // this function is incomplete\r\n    }\r\n\r\n    function _setWinners() private {\r\n        EventLog log = EventLog(s_logAddress);\r\n        uint256 numberOfTickets = log.getNumberOfTickets(s_eventId);\r\n        for (uint256 groupId = 0; groupId < numberOfTickets; groupId++) {\r\n            address winner = _calculateWinner(groupId);\r\n            log._addWinner(s_eventId, winner);\r\n        }\r\n    }\r\n\r\n    // calculate the winner of a given group\r\n    function _calculateWinner(uint256 _groupId) private view returns (address) {\r\n        address[] memory group = s_groups[_groupId]; // array with all the addresses of the group\r\n        uint256 groupLen = group.length;\r\n        uint256[] memory points = _returnGroupPoints(group, groupLen);\r\n        uint256 maxNum = _returnMaxNum(points);\r\n        address winner = _returnGroupWinner(group, maxNum, groupLen);\r\n        return winner;\r\n    }\r\n\r\n    // Return the points in a group\r\n    function _returnGroupPoints(address[] memory _group, uint256 _groupLen)\r\n        private\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory points; // array with all the points of the group\r\n        for (uint256 i = 0; i < _groupLen; i++) {\r\n            points[i] = scoreboard[_group[i]].points;\r\n        }\r\n        return points;\r\n    }\r\n\r\n    // Return the maximum points in a group\r\n    function _returnMaxNum(uint256[] memory _points)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 maxNum = 0;\r\n        for (uint256 i = 0; i < _points.length; i++) {\r\n            if (_points[i] > maxNum) {\r\n                maxNum = _points[i];\r\n            }\r\n        }\r\n        return maxNum;\r\n    }\r\n\r\n    // Return the winner for a given group --> CHECK THIS FUNCTION\r\n    function _returnGroupWinner(\r\n        address[] memory _group,\r\n        uint256 _maxNum,\r\n        uint256 _groupLen\r\n    ) private view returns (address) {\r\n        address[] memory winners; // defined as array to cover case of several users having same points\r\n        address winner;\r\n        uint j = 0;\r\n        for (uint256 i = 0; i < _groupLen; i++) {\r\n            address user = _group[i];\r\n            if (scoreboard[user].points == _maxNum) {\r\n                winners[j] = user;\r\n                j += 1;\r\n            }\r\n        }\r\n        if (winners.length == 1) {\r\n            winner = winners[0];\r\n        } else {\r\n            winner = _compareTimes(winners);\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    // returns the fastest player in a winners[] array\r\n    function _compareTimes(address[] memory _winners)\r\n        private\r\n        view\r\n        returns (address)\r\n    {\r\n        uint256 bestTime = block.timestamp;\r\n        address winner;\r\n        for (uint256 i = 0; i < _winners.length; i++) {\r\n            address user = _winners[i];\r\n            uint256 userTime = scoreboard[user].timeElapsed;\r\n            if (userTime < bestTime) {\r\n                bestTime = userTime;\r\n                winner = user;\r\n            }\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    //\r\n    // QUERY WINNERS AND SCOREBOARD\r\n    //\r\n\r\n    function getScoreboard() public view returns (UserScore memory) {\r\n        return scoreboard[msg.sender];\r\n    }\r\n\r\n    function isWinner(address _userAddress) external view returns (bool) {\r\n        EventLog log = EventLog(s_logAddress);\r\n        return log._isWinner(s_eventId, _userAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/gameInterface.sol": {
      "content": "interface EventLog {\r\n    function _logEvent(\r\n        uint256 _eventId,\r\n        address _eventGameAddress,\r\n        address _eventOwner,\r\n        string memory _eventName,\r\n        uint256 _numberOfTickets,\r\n        uint256 _ticketPrice\r\n    ) external;\r\n\r\n    function _updateName(uint256 _eventId, string memory _newName) external;\r\n\r\n    function _updateTickets(uint256 _eventId, uint256 _newTickets) external;\r\n\r\n    function _updatePrice(uint256 _eventId, uint256 _newPrice) external;\r\n\r\n    function getEventName(uint256 _eventId)\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    function getNumberOfTickets(uint256 _eventId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function _addRegisteredEvent(address _userAddress, uint256 _eventId)\r\n        external;\r\n\r\n    function _addCreatedEvent(address _userAddress, uint256 _eventId) external;\r\n\r\n    function _gameStart(uint256 _eventId) external;\r\n\r\n    function _closeEvent(uint256 _eventId) external;\r\n\r\n    function _addWinner(uint256 _eventId, address _winner) external;\r\n\r\n    function _isWinner(uint256 _eventId, address _userAddress)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface VRF {\r\n    function requestRandomWords() external;\r\n\r\n    function _getRandomNumber(uint256 _playId) external view returns (uint256);\r\n\r\n    function _haveNumbers() external view returns (bool);\r\n}\r\n"
    },
    "contracts/EventLog.sol": {
      "content": "pragma solidity 0.8.4;\n\n//This contract is a log of the created events\n\n//Error codes\nerror EventLog__NotCalledFromEventGame();\nerror EventLog__GameNotRegistering();\nerror EventLog__GameNotStarted();\n\n/** @title\n *  @author David Camps Novi\n *  @dev This contract saves all events and their details and allows to query data\n */\n// solc --userdoc --devdoc EventLog.sol\ncontract EventLog {\n    // all events ever created are stored in these structures\n    uint256 private s_numberOfEvents;\n    uint256[] s_eventIds;\n    mapping(uint256 => Event) s_events; // s_eventId => Event\n\n    // every user events are stored as userAddress => Event\n    mapping(address => uint256[]) s_registeredEvents;\n    mapping(address => uint256[]) s_createdEvents;\n\n    // the winners of each event are stored as s_eventId => userAddress => true\n    mapping(uint256 => mapping(address => bool)) s_winners;\n\n    enum GameStatus {\n        Registering,\n        Started,\n        Ended\n    }\n\n    struct Event {\n        address eventGameAddress;\n        address eventOwner;\n        string eventName;\n        uint256 numberOfTickets;\n        uint256 ticketPrice;\n        uint256 totalUsers;\n        GameStatus status;\n    }\n\n    //modifier callFromEvent() {\n    //    if (msg.sender != s_events[_eventId].eventGameAddress)\n    //        revert EventLog__NotCalledFromEventGame();\n    //    _;\n    //}\n\n    constructor() {\n        s_numberOfEvents = 0;\n    }\n\n    event GameStarted(\n        address indexed gameAddress,\n        address indexed owner,\n        uint256 timeStarted\n    );\n\n    event GameEnded(\n        address indexed gameAddress,\n        address indexed owner,\n        uint256 timeStarted\n    );\n\n    //\n    // LOG NEW EVENTS\n    //\n\n    function _logEvent(\n        uint256 _eventId,\n        address _eventGameAddress,\n        address _eventOwner,\n        string memory _eventName,\n        uint256 _numberOfTickets,\n        uint256 _ticketPrice\n    ) external {\n        s_events[_eventId] = Event(\n            _eventGameAddress,\n            _eventOwner,\n            _eventName,\n            _numberOfTickets,\n            _ticketPrice,\n            0,\n            GameStatus.Registering\n        );\n        s_numberOfEvents += 1;\n        s_eventIds.push(_eventId);\n    }\n\n    //\n    // UPDATE EVENTS\n    //\n\n    function _updateName(uint256 _eventId, string memory _newName)\n        external\n    //callFromEvent\n    {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        s_events[_eventId].eventName = _newName;\n    }\n\n    function _updateTickets(uint256 _eventId, uint256 _newTickets) external {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        s_events[_eventId].numberOfTickets = _newTickets;\n    }\n\n    function _updatePrice(uint256 _eventId, uint256 _newPrice) external {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        s_events[_eventId].ticketPrice = _newPrice;\n    }\n\n    // LOG OTHER EVENTS\n    function _addRegisteredEvent(address _userAddress, uint256 _eventId)\n        external\n    {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        s_registeredEvents[_userAddress].push(_eventId);\n        s_events[_eventId].totalUsers += 1;\n    }\n\n    function _addCreatedEvent(address _userAddress, uint256 _eventId) external {\n        //require(msg.sender == s_events[_eventId].eventGameAddress);\n        s_createdEvents[_userAddress].push(_eventId);\n    }\n\n    //\n    // CHANGE GAME STATUS\n    //\n\n    function _gameStart(uint256 _eventId) external {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        if (s_events[_eventId].status != GameStatus.Registering)\n            revert EventLog__GameNotRegistering();\n        //require(s_events[_eventId].status == GameStatus.Registering);\n        s_events[_eventId].status = GameStatus.Started;\n        Event memory _event = s_events[_eventId];\n        emit GameStarted(\n            _event.eventGameAddress,\n            _event.eventOwner,\n            block.timestamp\n        );\n    }\n\n    function _gameEnd(uint256 _eventId) external {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        if (s_events[_eventId].status != GameStatus.Started)\n            revert EventLog__GameNotStarted();\n        //require(s_events[_eventId].status == GameStatus.Started);\n        s_events[_eventId].status = GameStatus.Ended;\n        Event memory _event = s_events[_eventId];\n        emit GameEnded(\n            _event.eventGameAddress,\n            _event.eventOwner,\n            block.timestamp\n        );\n    }\n\n    //\n    // CHANGE GAME STATUS\n    //\n\n    function _addWinner(uint256 _eventId, address _winner) external {\n        if (msg.sender != s_events[_eventId].eventGameAddress)\n            revert EventLog__NotCalledFromEventGame();\n        s_winners[_eventId][_winner] = true;\n    }\n\n    //\n    // GETTER FUNCTIONS\n    //\n\n    function getNumberOfEvents() public view returns (uint256) {\n        return s_numberOfEvents;\n    }\n\n    function getEvent(uint256 _eventId) public view returns (Event memory) {\n        Event memory newEvent = s_events[_eventId];\n        return newEvent;\n    }\n\n    function getEventAddress(uint256 _eventId) public view returns (address) {\n        return s_events[_eventId].eventGameAddress;\n    }\n\n    function getEventName(uint256 _eventId)\n        external\n        view\n        returns (string memory)\n    {\n        return s_events[_eventId].eventName;\n    }\n\n    function getNumberOfTickets(uint256 _eventId)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 numberOfTickets = s_events[_eventId].numberOfTickets;\n        return numberOfTickets;\n    }\n\n    function getOpenEvents() public view returns (Event[] memory) {\n        uint256 availableLength = 0;\n        for (uint256 i = 1; i <= s_numberOfEvents; i++) {\n            if (s_events[i].status == GameStatus.Registering) {\n                availableLength += 1;\n            }\n        }\n\n        Event[] memory openEvents = new Event[](availableLength);\n        uint256 currentIndex = 0;\n        for (uint256 i = 1; i <= s_numberOfEvents; i++) {\n            if (s_events[i].status == GameStatus.Registering) {\n                openEvents[currentIndex] = s_events[i];\n                currentIndex += 1;\n            }\n        }\n        return openEvents;\n    }\n\n    function getRegisteredEvents(address _userAddress)\n        public\n        view\n        returns (Event[] memory)\n    {\n        uint256[] memory registeredEvents = s_registeredEvents[_userAddress];\n        uint256 availableLength = registeredEvents.length;\n        Event[] memory registeredEventsStruct = new Event[](availableLength);\n        for (uint256 i = 0; i < availableLength; i++) {\n            uint256 eventId = registeredEvents[i];\n            Event memory newEvent = s_events[eventId];\n            registeredEventsStruct[i] = newEvent;\n        }\n        return registeredEventsStruct;\n    }\n\n    function getCreatedEvents(address _userAddress)\n        public\n        view\n        returns (Event[] memory)\n    {\n        uint256[] memory createdEvents = s_createdEvents[_userAddress];\n        uint256 availableLength = createdEvents.length;\n        Event[] memory createdEventsStruct = new Event[](availableLength);\n        for (uint256 i = 0; i < availableLength; i++) {\n            uint256 eventId = createdEvents[i];\n            Event memory newEvent = s_events[eventId];\n            createdEventsStruct[i] = newEvent;\n        }\n        return createdEventsStruct;\n    }\n\n    function _isWinner(uint256 _eventId, address _userAddress)\n        external\n        view\n        returns (bool)\n    {\n        return s_winners[_eventId][_userAddress];\n    }\n}\n"
    },
    "contracts/test/MockVRF.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/tests/VRFConsumerV2.sol\";\r\n"
    },
    "@chainlink/contracts/src/v0.8/tests/VRFConsumerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFConsumerV2 is VRFConsumerBaseV2 {\n  uint256[] public s_randomWords;\n  uint256 public s_requestId;\n  VRFCoordinatorV2Interface COORDINATOR;\n  LinkTokenInterface LINKTOKEN;\n  uint64 public s_subId;\n  uint256 public s_gasAvailable;\n\n  constructor(address vrfCoordinator, address link) VRFConsumerBaseV2(vrfCoordinator) {\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n    LINKTOKEN = LinkTokenInterface(link);\n  }\n\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n    require(requestId == s_requestId, \"request ID is incorrect\");\n\n    s_gasAvailable = gasleft();\n    s_randomWords = randomWords;\n  }\n\n  function testCreateSubscriptionAndFund(uint96 amount) external {\n    if (s_subId == 0) {\n      s_subId = COORDINATOR.createSubscription();\n      COORDINATOR.addConsumer(s_subId, address(this));\n    }\n    // Approve the link transfer.\n    LINKTOKEN.transferAndCall(address(COORDINATOR), amount, abi.encode(s_subId));\n  }\n\n  function topUpSubscription(uint96 amount) external {\n    require(s_subId != 0, \"sub not set\");\n    // Approve the link transfer.\n    LINKTOKEN.transferAndCall(address(COORDINATOR), amount, abi.encode(s_subId));\n  }\n\n  function updateSubscription(address[] memory consumers) external {\n    require(s_subId != 0, \"subID not set\");\n    for (uint256 i = 0; i < consumers.length; i++) {\n      COORDINATOR.addConsumer(s_subId, consumers[i]);\n    }\n  }\n\n  function testRequestRandomness(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minReqConfs,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256) {\n    s_requestId = COORDINATOR.requestRandomWords(keyHash, subId, minReqConfs, callbackGasLimit, numWords);\n    return s_requestId;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/VFR.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// An example of a consumer contract that relies on a subscription for funding.\r\npragma solidity 0.8.4;\r\n\r\n// we need to request a random number from this contract\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n// we also need some functionalities from this contract\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\ncontract VRF is VRFConsumerBaseV2 {\r\n    VRFCoordinatorV2Interface immutable i_vrfCoordinator; // \"i_\" to remind it's an immutable variable\r\n\r\n    address constant VRF_COORDINATOR =\r\n        0x6168499c0cFfCaCD319c818142124B7A15E857ab;\r\n    bytes32 constant GAS_LANE =\r\n        0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f; // =keyHash --> max gas price willing to pay for the request\r\n    uint64 constant SUBSCRIPTION_ID = 4894;\r\n    uint32 constant CALLBACK_GAS_LIMIT = 1000000; // max gas amoung willing to pay to receive the number\r\n    uint16 constant REQUEST_CONFIRMATIONS = 3; // how many confirmationts we want to wait to consider the transaction completed\r\n    uint32 constant NUM_WORDS = 5; // number of values that we want to get\r\n    uint256 constant MAX_VALUE = 2; // maximum value we want to get\r\n\r\n    //variables no definides en aquest contracte:\r\n    uint256[] s_randomWords;\r\n    uint256 public s_requestId;\r\n\r\n    constructor() VRFConsumerBaseV2(VRF_COORDINATOR) {\r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(VRF_COORDINATOR);\r\n    }\r\n\r\n    function requestRandomWords() external {\r\n        s_requestId = i_vrfCoordinator.requestRandomWords(\r\n            GAS_LANE,\r\n            SUBSCRIPTION_ID,\r\n            REQUEST_CONFIRMATIONS,\r\n            CALLBACK_GAS_LIMIT,\r\n            NUM_WORDS\r\n        );\r\n    }\r\n\r\n    // will provide an array of random values\r\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\r\n        internal\r\n        override\r\n    {\r\n        for (uint256 i = 0; i < MAX_VALUE; i++) {\r\n            s_randomWords[i] = randomWords[i] % MAX_VALUE; // we will get a number between 0-2\r\n        }\r\n    }\r\n\r\n    function _getRandomNumber(uint256 _playId) external view returns (uint256) {\r\n        return s_randomWords[_playId];\r\n    }\r\n\r\n    function _haveNumbers() external view returns (bool) {\r\n        if (s_randomWords.length == 3) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}